{
    "Codec_18": {
        "org.apache.commons.codec.CharEncodingTest::testUtf16": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.CharEncodingTest::testUtf8": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.CharEncodingTest::testUsAscii": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.CharEncodingTest::testUtf16Be": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.CharEncodingTest::testUtf16Le": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.CharEncodingTest::testIso8859_1": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.CharEncodingTest::testConstructor": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.CharsetsTest::testUtf16": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.CharsetsTest::testUtf8": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.CharsetsTest::testUsAscii": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.CharsetsTest::testUtf16Be": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.CharsetsTest::testUtf16Le": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.CharsetsTest::testToCharset": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.CharsetsTest::testIso8859_1": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.DecoderExceptionTest::testConstructor0": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.DecoderExceptionTest::testConstructorThrowable": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.DecoderExceptionTest::testConstructorStringThrowable": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.DecoderExceptionTest::testConstructorString": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.EncoderExceptionTest::testConstructor0": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.EncoderExceptionTest::testConstructorThrowable": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.EncoderExceptionTest::testConstructorStringThrowable": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.EncoderExceptionTest::testConstructorString": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.StringEncoderComparatorTest::testComparatorWithDoubleMetaphone": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.StringEncoderComparatorTest::testComparatorWithDoubleMetaphoneAndInvalidInput": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.StringEncoderComparatorTest::testComparatorWithSoundex": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.Base32InputStreamTest::testBase32InputStreamByteByByte": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.binary.Base32InputStreamTest::testSkipToEnd": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.binary.Base32InputStreamTest::testSkipNone": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.binary.Base32InputStreamTest::testRead0": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.binary.Base32InputStreamTest::testBase32EmptyInputStreamPemChuckSize": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.Base32InputStreamTest::testMarkSupported": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.binary.Base32InputStreamTest::testReadOutOfBounds": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.binary.Base32InputStreamTest::testReadNull": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.binary.Base32InputStreamTest::testCodec105": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.Base32InputStreamTest::testCodec130": {
            "line_rate": "0.1282051282051282",
            "branch_rate": "0.08333333333333333"
        },
        "org.apache.commons.codec.binary.Base32InputStreamTest::testSkipWrongArgument": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.binary.Base32InputStreamTest::testAvailable": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.binary.Base32InputStreamTest::testBase32EmptyInputStreamMimeChuckSize": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.Base32InputStreamTest::testSkipPastEnd": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.binary.Base32InputStreamTest::testSkipBig": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.binary.Base32InputStreamTest::testBase32InputStreamByChunk": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.binary.Base32OutputStreamTest::testWriteOutOfBounds": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.Base32OutputStreamTest::testBase32EmptyOutputStreamPemChunkSize": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.Base32OutputStreamTest::testWriteToNullCoverage": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.Base32OutputStreamTest::testBase32EmptyOutputStreamMimeChunkSize": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.Base32OutputStreamTest::testBase32OutputStreamByChunk": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.binary.Base32OutputStreamTest::testBase32OutputStreamByteByByte": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.binary.Base32Test::testBase32Samples": {
            "line_rate": "0.05128205128205128",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.binary.Base32Test::testBase32SamplesNonDefaultPadding": {
            "line_rate": "0.05128205128205128",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.binary.Base32Test::testRandomBytes": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.Base32Test::testRandomBytesHex": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.Base32Test::testSingleCharEncoding": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.Base32Test::testCodec200": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.Base32Test::testRandomBytesChunked": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.Base32Test::testBase32HexSamples": {
            "line_rate": "0.05128205128205128",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.binary.Base32Test::testBase64AtBufferStart": {
            "line_rate": "0.05128205128205128",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.binary.Base32Test::testBase64AtBufferMiddle": {
            "line_rate": "0.05128205128205128",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.binary.Base32Test::testBase64AtBufferEnd": {
            "line_rate": "0.05128205128205128",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.binary.Base32Test::testBase32Chunked": {
            "line_rate": "0.05128205128205128",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.binary.Base64Codec13Test::testEncoder": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.Base64Codec13Test::testBinaryEncoder": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.Base64Codec13Test::testStaticEncodeChunked": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.Base64Codec13Test::testDecoder": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.Base64Codec13Test::testBinaryDecoder": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.Base64Codec13Test::testStaticDecodeChunked": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.Base64Codec13Test::testStaticDecode": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.Base64Codec13Test::testStaticEncode": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.Base64InputStreamTest::testSkipToEnd": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.binary.Base64InputStreamTest::testSkipNone": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.binary.Base64InputStreamTest::testCodec98NPE": {
            "line_rate": "0.1282051282051282",
            "branch_rate": "0.08333333333333333"
        },
        "org.apache.commons.codec.binary.Base64InputStreamTest::testRead0": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.binary.Base64InputStreamTest::testBase64InputStreamByChunk": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.binary.Base64InputStreamTest::testMarkSupported": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.binary.Base64InputStreamTest::testInputStreamReader": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.binary.Base64InputStreamTest::testReadOutOfBounds": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.binary.Base64InputStreamTest::testReadNull": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.binary.Base64InputStreamTest::testCodec101": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.binary.Base64InputStreamTest::testCodec105": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.Base64InputStreamTest::testCodec130": {
            "line_rate": "0.1282051282051282",
            "branch_rate": "0.08333333333333333"
        },
        "org.apache.commons.codec.binary.Base64InputStreamTest::testSkipWrongArgument": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.binary.Base64InputStreamTest::testAvailable": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.binary.Base64InputStreamTest::testBase64EmptyInputStreamPemChuckSize": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.Base64InputStreamTest::testBase64EmptyInputStreamMimeChuckSize": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.Base64InputStreamTest::testSkipPastEnd": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.binary.Base64InputStreamTest::testSkipBig": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.binary.Base64InputStreamTest::testBase64InputStreamByteByByte": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.binary.Base64OutputStreamTest::testCodec98NPE": {
            "line_rate": "0.1282051282051282",
            "branch_rate": "0.08333333333333333"
        },
        "org.apache.commons.codec.binary.Base64OutputStreamTest::testWriteOutOfBounds": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.Base64OutputStreamTest::testBase64OutputStreamByteByByte": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.binary.Base64OutputStreamTest::testWriteToNullCoverage": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.Base64OutputStreamTest::testBase64EmptyOutputStreamMimeChunkSize": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.Base64OutputStreamTest::testBase64EmptyOutputStreamPemChunkSize": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.Base64OutputStreamTest::testBase64OutputStreamByChunk": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.binary.Base64Test::testTriplets": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.Base64Test::testCodeIntegerEdgeCases": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.Base64Test::testStringToByteVariations": {
            "line_rate": "0.15384615384615385",
            "branch_rate": "0.16666666666666666"
        },
        "org.apache.commons.codec.binary.Base64Test::testConstructor_Int_ByteArray_Boolean_UrlSafe": {
            "line_rate": "0.05128205128205128",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.binary.Base64Test::testSingletonsChunked": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.Base64Test::testKnownDecodings": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.Base64Test::testPairs": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.Base64Test::testUUID": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.binary.Base64Test::testEncodeDecodeSmall": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.Base64Test::testConstructors": {
            "line_rate": "0.05128205128205128",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.binary.Base64Test::testObjectDecodeWithValidParameter": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.Base64Test::testCodeInteger1": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.Base64Test::testCodeInteger2": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.Base64Test::testCodeInteger3": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.Base64Test::testCodeInteger4": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.Base64Test::testObjectEncode": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.Base64Test::testRfc2045Section6Dot8ChunkSizeDefinition": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.Base64Test::testUrlSafe": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.Base64Test::testObjectEncodeWithInvalidParameter": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.Base64Test::testEncodeDecodeRandom": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.Base64Test::testRfc2045Section2Dot1CrLfDefinition": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.Base64Test::testDecodeWithWhitespace": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.Base64Test::testDecodePadOnlyChunked": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.Base64Test::testKnownEncodings": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.Base64Test::testIgnoringNonBase64InDecode": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.Base64Test::testCodec112": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.Base64Test::testDecodePadMarkerIndex2": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.Base64Test::testDecodePadMarkerIndex3": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.Base64Test::testIsUrlSafe": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.Base64Test::testEncodeOverMaxSize": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.Base64Test::testEmptyBase64": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.Base64Test::testSingletons": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.Base64Test::testTripletsChunked": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.Base64Test::testBase64AtBufferStart": {
            "line_rate": "0.1282051282051282",
            "branch_rate": "0.08333333333333333"
        },
        "org.apache.commons.codec.binary.Base64Test::testCodec68": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.Base64Test::testBase64AtBufferMiddle": {
            "line_rate": "0.1282051282051282",
            "branch_rate": "0.08333333333333333"
        },
        "org.apache.commons.codec.binary.Base64Test::testBase64AtBufferEnd": {
            "line_rate": "0.1282051282051282",
            "branch_rate": "0.08333333333333333"
        },
        "org.apache.commons.codec.binary.Base64Test::testRfc4648Section10DecodeEncode": {
            "line_rate": "0.15384615384615385",
            "branch_rate": "0.08333333333333333"
        },
        "org.apache.commons.codec.binary.Base64Test::testObjectDecodeWithInvalidParameter": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.Base64Test::testIsArrayByteBase64": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.Base64Test::testDecodePadOnly": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.Base64Test::testChunkedEncodeMultipleOf76": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.binary.Base64Test::testBase64": {
            "line_rate": "0.1282051282051282",
            "branch_rate": "0.08333333333333333"
        },
        "org.apache.commons.codec.binary.Base64Test::testRfc1421Section6Dot8ChunkSizeDefinition": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.Base64Test::testNonBase64Test": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.Base64Test::testConstructor_Int_ByteArray_Boolean": {
            "line_rate": "0.05128205128205128",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.binary.Base64Test::testByteToStringVariations": {
            "line_rate": "0.1282051282051282",
            "branch_rate": "0.125"
        },
        "org.apache.commons.codec.binary.Base64Test::testObjectEncodeWithValidParameter": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.Base64Test::testRfc4648Section10DecodeWithCrLf": {
            "line_rate": "0.1282051282051282",
            "branch_rate": "0.08333333333333333"
        },
        "org.apache.commons.codec.binary.Base64Test::testRfc4648Section10Decode": {
            "line_rate": "0.1282051282051282",
            "branch_rate": "0.08333333333333333"
        },
        "org.apache.commons.codec.binary.Base64Test::testRfc4648Section10Encode": {
            "line_rate": "0.1282051282051282",
            "branch_rate": "0.08333333333333333"
        },
        "org.apache.commons.codec.binary.Base64Test::testCodeIntegerNull": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.Base64Test::testIsStringBase64": {
            "line_rate": "0.10256410256410256",
            "branch_rate": "0.08333333333333333"
        },
        "org.apache.commons.codec.binary.Base64Test::testRfc4648Section10EncodeDecode": {
            "line_rate": "0.15384615384615385",
            "branch_rate": "0.08333333333333333"
        },
        "org.apache.commons.codec.binary.Base64Test::testDecodeWithInnerPad": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.binary.BaseNCodecTest::testBaseNCodec": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.BaseNCodecTest::testProvidePaddingByte": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.BaseNCodecTest::testIsInAlphabetByte": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.BaseNCodecTest::testContainsAlphabetOrPad": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.BaseNCodecTest::testIsWhiteSpace": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.BaseNCodecTest::testIsInAlphabetString": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.binary.BaseNCodecTest::testIsInAlphabetByteArrayBoolean": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.BinaryCodecTest::testToAsciiBytes": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.BinaryCodecTest::testToAsciiChars": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.BinaryCodecTest::testToByteArrayFromString": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.BinaryCodecTest::testEncodeByteArray": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.BinaryCodecTest::testEncodeObjectNull": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.BinaryCodecTest::testToAsciiString": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.BinaryCodecTest::testFromAsciiByteArray": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.BinaryCodecTest::testDecodeObjectException": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.BinaryCodecTest::testDecodeObject": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.BinaryCodecTest::testEncodeObjectException": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.BinaryCodecTest::testEncodeObject": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.BinaryCodecTest::testDecodeByteArray": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.BinaryCodecTest::testFromAsciiCharArray": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.HexTest::testEncodeHexByteString_ByteBufferBoolean_ToUpperCase": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.HexTest::testDecodeHexStringOddCharacters1": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.HexTest::testEncodeDecodeHexCharArrayRandom": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.binary.HexTest::testDecodeByteBufferObjectEmpty": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.HexTest::testEncodeHexByteArrayHelloWorldLowerCaseHex": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.binary.HexTest::testDecodeByteArrayOddCharacters": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.HexTest::testDecodeHexCharArrayOddCharacters1": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.HexTest::testDecodeHexCharArrayOddCharacters3": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.HexTest::testDecodeHexCharArrayOddCharacters5": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.HexTest::testDecodeByteBufferOddCharacters": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.HexTest::testEncodeHexByteBufferHelloWorldLowerCaseHex": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.binary.HexTest::testEncodeHexByteArrayHelloWorldUpperCaseHex": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.binary.HexTest::testDecodeByteBufferEmpty": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.HexTest::testCustomCharset": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.HexTest::testEncodeHexByteArrayZeroes": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.HexTest::testEncodeClassCastException": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.HexTest::testEncodeByteBufferObjectEmpty": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.HexTest::testDecodeHexStringOddCharacters": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.HexTest::testDecodeStringEmpty": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.HexTest::testEncodeHexByteString_ByteArrayBoolean_ToLowerCase": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.HexTest::testEncodeHexByteBufferHelloWorldUpperCaseHex": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.binary.HexTest::testCustomCharsetBadName": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.HexTest::testEncodeByteBufferEmpty": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.HexTest::testEncodeByteArrayObjectEmpty": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.HexTest::testDecodeBadCharacterPos0": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.HexTest::testDecodeBadCharacterPos1": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.HexTest::testDecodeHexStringEmpty": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.HexTest::testEncodeHexByteString_ByteArrayBoolean_ToUpperCase": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.HexTest::testEncodeHexByteString_ByteArrayOfZeroes": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.HexTest::testEncodeStringEmpty": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.HexTest::testDecodeByteArrayEmpty": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.HexTest::testEncodeHex_ByteBufferOfZeroes": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.HexTest::testGetCharset": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.HexTest::testGetCharsetName": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.HexTest::testDecodeClassCastException": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.HexTest::testEncodeHexByteString_ByteBufferOfZeroes": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.HexTest::testEncodeHexByteString_ByteBufferBoolean_ToLowerCase": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.HexTest::testDecodeByteArrayObjectEmpty": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.HexTest::testEncodeByteArrayEmpty": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.HexTest::testRequiredCharset": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.HexTest::testCustomCharsetToString": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.HexTest::testEncodeHexByteBufferEmpty": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.HexTest::testEncodeHexByteArrayEmpty": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.HexTest::testDecodeHexCharArrayEmpty": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.StringUtilsTest::testNewStringNullInput": {
            "line_rate": "0.05128205128205128",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.binary.StringUtilsTest::testNewStringNullInput_CODEC229": {
            "line_rate": "0.1794871794871795",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.binary.StringUtilsTest::testGetBytesUtf16": {
            "line_rate": "0.1282051282051282",
            "branch_rate": "0.08333333333333333"
        },
        "org.apache.commons.codec.binary.StringUtilsTest::testGetBytesUtf8": {
            "line_rate": "0.1282051282051282",
            "branch_rate": "0.08333333333333333"
        },
        "org.apache.commons.codec.binary.StringUtilsTest::testGetBytesIso8859_1": {
            "line_rate": "0.1282051282051282",
            "branch_rate": "0.08333333333333333"
        },
        "org.apache.commons.codec.binary.StringUtilsTest::testGetBytesUsAscii": {
            "line_rate": "0.1282051282051282",
            "branch_rate": "0.08333333333333333"
        },
        "org.apache.commons.codec.binary.StringUtilsTest::testGetBytesUtf16Be": {
            "line_rate": "0.1282051282051282",
            "branch_rate": "0.08333333333333333"
        },
        "org.apache.commons.codec.binary.StringUtilsTest::testGetBytesUtf16Le": {
            "line_rate": "0.1282051282051282",
            "branch_rate": "0.08333333333333333"
        },
        "org.apache.commons.codec.binary.StringUtilsTest::testGetBytesUncheckedNullInput": {
            "line_rate": "0.05128205128205128",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.binary.StringUtilsTest::testEqualsString": {
            "line_rate": "0.15384615384615385",
            "branch_rate": "0.3333333333333333"
        },
        "org.apache.commons.codec.binary.StringUtilsTest::testNewStringIso8859_1": {
            "line_rate": "0.10256410256410256",
            "branch_rate": "0.08333333333333333"
        },
        "org.apache.commons.codec.binary.StringUtilsTest::testGetBytesUncheckedBadName": {
            "line_rate": "0.1282051282051282",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.binary.StringUtilsTest::testNewStringUtf8": {
            "line_rate": "0.10256410256410256",
            "branch_rate": "0.08333333333333333"
        },
        "org.apache.commons.codec.binary.StringUtilsTest::testNewStringUsAscii": {
            "line_rate": "0.10256410256410256",
            "branch_rate": "0.08333333333333333"
        },
        "org.apache.commons.codec.binary.StringUtilsTest::testNewStringUtf16Be": {
            "line_rate": "0.10256410256410256",
            "branch_rate": "0.08333333333333333"
        },
        "org.apache.commons.codec.binary.StringUtilsTest::testNewStringUtf16Le": {
            "line_rate": "0.10256410256410256",
            "branch_rate": "0.08333333333333333"
        },
        "org.apache.commons.codec.binary.StringUtilsTest::testEqualsCS1": {
            "line_rate": "0.1282051282051282",
            "branch_rate": "0.4166666666666667"
        },
        "org.apache.commons.codec.binary.StringUtilsTest::testEqualsCS2": {
            "line_rate": "0.10256410256410256",
            "branch_rate": "0.4166666666666667"
        },
        "org.apache.commons.codec.binary.StringUtilsTest::testNewStringUtf16": {
            "line_rate": "0.10256410256410256",
            "branch_rate": "0.08333333333333333"
        },
        "org.apache.commons.codec.binary.StringUtilsTest::testConstructor": {
            "line_rate": "0.02564102564102564",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.binary.StringUtilsTest::testNewStringBadEnc": {
            "line_rate": "0.1282051282051282",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.digest.Apr1CryptTest::testApr1CryptBytes": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.Apr1CryptTest::testApr1CryptWithEmptySalt": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.Apr1CryptTest::testApr1CryptNullData": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.Apr1CryptTest::testApr1CryptWithoutSalt": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.Apr1CryptTest::testApr1LongSalt": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.Apr1CryptTest::testApr1CryptExplicitCall": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.Apr1CryptTest::testApr1CryptWithInvalidSalt": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.Apr1CryptTest::testApr1CryptStrings": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.B64Test::testB64T": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.B64Test::testB64from24bit": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.CryptTest::testDefaultCryptVariant": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.CryptTest::testCrypt": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.CryptTest::testCryptWithEmptySalt": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.CryptTest::testCryptWithBytes": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.DigestUtilsTest::testMd5HexLengthForBytes": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.digest.DigestUtilsTest::testSha1UpdateWithByteBuffer": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.DigestUtilsTest::testSha512HexInputStream": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.DigestUtilsTest::testMd2Length": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.digest.DigestUtilsTest::testInternalNoSuchAlgorithmException": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.DigestUtilsTest::testMd5LengthForBytes": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.digest.DigestUtilsTest::testSha1UpdateWithByteArray": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.DigestUtilsTest::testSha1UpdateWithString": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.digest.DigestUtilsTest::testShaUpdateWithByteArray": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.DigestUtilsTest::testMd2Hex": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.digest.DigestUtilsTest::testMd5Hex": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.digest.DigestUtilsTest::testSha1Hex": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.digest.DigestUtilsTest::testMd2HexLength": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.digest.DigestUtilsTest::testSha224": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.digest.DigestUtilsTest::testSha256": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.digest.DigestUtilsTest::testSha384": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.digest.DigestUtilsTest::testSha512": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.digest.DigestUtilsTest::testShaHex": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.digest.DigestUtilsTest::testShaUpdateWithString": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.digest.HmacAlgorithmsTest::testMacInputStream[HmacMD5]": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.HmacAlgorithmsTest::testMacHexInputStream[HmacMD5]": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.HmacAlgorithmsTest::testMacString[HmacMD5]": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.digest.HmacAlgorithmsTest::testHmacHexFailInputStream[HmacMD5]": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.HmacAlgorithmsTest::testHmacFailByteArray[HmacMD5]": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.HmacAlgorithmsTest::testHmacFailString[HmacMD5]": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.digest.HmacAlgorithmsTest::testHmacHexFailByteArray[HmacMD5]": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.HmacAlgorithmsTest::testGetHmacEmptyKey[HmacMD5]": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.HmacAlgorithmsTest::testHmacHexFailString[HmacMD5]": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.digest.HmacAlgorithmsTest::testHmacFailInputStream[HmacMD5]": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.HmacAlgorithmsTest::testInitializedMac[HmacMD5]": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.digest.HmacAlgorithmsTest::testAlgorithm[HmacMD5]": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.HmacAlgorithmsTest::testGetHmacNullKey[HmacMD5]": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.HmacAlgorithmsTest::testMacByteArary[HmacMD5]": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.HmacAlgorithmsTest::testMacHexByteArray[HmacMD5]": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.HmacAlgorithmsTest::testMacHexString[HmacMD5]": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.digest.HmacAlgorithmsTest::testMacInputStream[HmacSHA1]": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.HmacAlgorithmsTest::testMacHexInputStream[HmacSHA1]": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.HmacAlgorithmsTest::testMacString[HmacSHA1]": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.digest.HmacAlgorithmsTest::testHmacHexFailInputStream[HmacSHA1]": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.HmacAlgorithmsTest::testHmacFailByteArray[HmacSHA1]": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.HmacAlgorithmsTest::testHmacFailString[HmacSHA1]": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.digest.HmacAlgorithmsTest::testHmacHexFailByteArray[HmacSHA1]": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.HmacAlgorithmsTest::testGetHmacEmptyKey[HmacSHA1]": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.HmacAlgorithmsTest::testHmacHexFailString[HmacSHA1]": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.digest.HmacAlgorithmsTest::testHmacFailInputStream[HmacSHA1]": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.HmacAlgorithmsTest::testInitializedMac[HmacSHA1]": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.digest.HmacAlgorithmsTest::testAlgorithm[HmacSHA1]": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.HmacAlgorithmsTest::testGetHmacNullKey[HmacSHA1]": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.HmacAlgorithmsTest::testMacByteArary[HmacSHA1]": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.HmacAlgorithmsTest::testMacHexByteArray[HmacSHA1]": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.HmacAlgorithmsTest::testMacHexString[HmacSHA1]": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.digest.HmacAlgorithmsTest::testMacInputStream[HmacSHA256]": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.HmacAlgorithmsTest::testMacHexInputStream[HmacSHA256]": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.HmacAlgorithmsTest::testMacString[HmacSHA256]": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.digest.HmacAlgorithmsTest::testHmacHexFailInputStream[HmacSHA256]": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.HmacAlgorithmsTest::testHmacFailByteArray[HmacSHA256]": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.HmacAlgorithmsTest::testHmacFailString[HmacSHA256]": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.digest.HmacAlgorithmsTest::testHmacHexFailByteArray[HmacSHA256]": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.HmacAlgorithmsTest::testGetHmacEmptyKey[HmacSHA256]": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.HmacAlgorithmsTest::testHmacHexFailString[HmacSHA256]": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.digest.HmacAlgorithmsTest::testHmacFailInputStream[HmacSHA256]": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.HmacAlgorithmsTest::testInitializedMac[HmacSHA256]": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.digest.HmacAlgorithmsTest::testAlgorithm[HmacSHA256]": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.HmacAlgorithmsTest::testGetHmacNullKey[HmacSHA256]": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.HmacAlgorithmsTest::testMacByteArary[HmacSHA256]": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.HmacAlgorithmsTest::testMacHexByteArray[HmacSHA256]": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.HmacAlgorithmsTest::testMacHexString[HmacSHA256]": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.digest.HmacAlgorithmsTest::testMacInputStream[HmacSHA384]": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.HmacAlgorithmsTest::testMacHexInputStream[HmacSHA384]": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.HmacAlgorithmsTest::testMacString[HmacSHA384]": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.digest.HmacAlgorithmsTest::testHmacHexFailInputStream[HmacSHA384]": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.HmacAlgorithmsTest::testHmacFailByteArray[HmacSHA384]": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.HmacAlgorithmsTest::testHmacFailString[HmacSHA384]": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.digest.HmacAlgorithmsTest::testHmacHexFailByteArray[HmacSHA384]": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.HmacAlgorithmsTest::testGetHmacEmptyKey[HmacSHA384]": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.HmacAlgorithmsTest::testHmacHexFailString[HmacSHA384]": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.digest.HmacAlgorithmsTest::testHmacFailInputStream[HmacSHA384]": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.HmacAlgorithmsTest::testInitializedMac[HmacSHA384]": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.digest.HmacAlgorithmsTest::testAlgorithm[HmacSHA384]": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.HmacAlgorithmsTest::testGetHmacNullKey[HmacSHA384]": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.HmacAlgorithmsTest::testMacByteArary[HmacSHA384]": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.HmacAlgorithmsTest::testMacHexByteArray[HmacSHA384]": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.HmacAlgorithmsTest::testMacHexString[HmacSHA384]": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.digest.HmacAlgorithmsTest::testMacInputStream[HmacSHA512]": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.HmacAlgorithmsTest::testMacHexInputStream[HmacSHA512]": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.HmacAlgorithmsTest::testMacString[HmacSHA512]": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.digest.HmacAlgorithmsTest::testHmacHexFailInputStream[HmacSHA512]": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.HmacAlgorithmsTest::testHmacFailByteArray[HmacSHA512]": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.HmacAlgorithmsTest::testHmacFailString[HmacSHA512]": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.digest.HmacAlgorithmsTest::testHmacHexFailByteArray[HmacSHA512]": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.HmacAlgorithmsTest::testGetHmacEmptyKey[HmacSHA512]": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.HmacAlgorithmsTest::testHmacHexFailString[HmacSHA512]": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.digest.HmacAlgorithmsTest::testHmacFailInputStream[HmacSHA512]": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.HmacAlgorithmsTest::testInitializedMac[HmacSHA512]": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.digest.HmacAlgorithmsTest::testAlgorithm[HmacSHA512]": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.HmacAlgorithmsTest::testGetHmacNullKey[HmacSHA512]": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.HmacAlgorithmsTest::testMacByteArary[HmacSHA512]": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.HmacAlgorithmsTest::testMacHexByteArray[HmacSHA512]": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.HmacAlgorithmsTest::testMacHexString[HmacSHA512]": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.digest.HmacUtilsTest::testHmacMd5Hex": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.digest.HmacUtilsTest::testHmacSha1Hex": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.digest.HmacUtilsTest::testSecretKeySpecAllowsEmtyKeys": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.HmacUtilsTest::testHmacSha1UpdateWithByteArray": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.HmacUtilsTest::testSha256HMacFail": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.HmacUtilsTest::testInternalNoSuchAlgorithmException": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.digest.HmacUtilsTest::testSha256HMac": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.digest.HmacUtilsTest::testInitializedMacNullKey": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.HmacUtilsTest::testGetHMac": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.HmacUtilsTest::testSha1HMacFail": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.HmacUtilsTest::testSha1HMac": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.digest.HmacUtilsTest::testInitializedMacNullAlgo": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.HmacUtilsTest::testSha384HMacFail": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.HmacUtilsTest::testSha384HMac": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.digest.HmacUtilsTest::testMd5HMac": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.digest.HmacUtilsTest::testMd5HMacFail": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.HmacUtilsTest::testInitializedMac": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.digest.HmacUtilsTest::testSha512HMacFail": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.HmacUtilsTest::testHmacSha1UpdateWithString": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.digest.HmacUtilsTest::testHmacSha1UpdateWithInpustream": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.HmacUtilsTest::testNullKey": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.HmacUtilsTest::testEmptyKey": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.HmacUtilsTest::testSha512HMac": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.digest.Md5CryptTest::testMd5CryptNullData": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.Md5CryptTest::testCtor": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.Md5CryptTest::testMd5CryptBytes": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.Md5CryptTest::testMd5CryptLongInput": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.Md5CryptTest::testMd5CryptWithEmptySalt": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.Md5CryptTest::testMd5CryptExplicitCall": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.Md5CryptTest::testMd5CryptStrings": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.PureJavaCrc32CTest::testZeros": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.PureJavaCrc32CTest::testOnes": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.PureJavaCrc32CTest::testIncreasing": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.PureJavaCrc32CTest::testDecreasing": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.PureJavaCrc32Test::testCorrectness": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.Sha256CryptTest::testSha256CryptNullData": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.Sha256CryptTest::testSha256CryptBytes": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.Sha256CryptTest::testSha256CryptWithEmptySalt": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.Sha256CryptTest::testSha2CryptRounds": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.Sha256CryptTest::testSha256LargetThanBlocksize": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.Sha256CryptTest::testSha256CryptExplicitCall": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.Sha256CryptTest::testSha256CryptStrings": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.Sha2CryptTest::testCtor": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.Sha512CryptTest::testSha2CryptRounds": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.Sha512CryptTest::testSha2CryptWrongSalt": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.Sha512CryptTest::testSha256LargetThanBlocksize": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.Sha512CryptTest::testSha512CryptWithEmptySalt": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.Sha512CryptTest::testSha512CryptBytes": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.Sha512CryptTest::testSha512CryptStrings": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.Sha512CryptTest::testSha512CryptNullData": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.Sha512CryptTest::testSha512CryptExplicitCall": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.UnixCryptTest::testUnicCryptInvalidSalt": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.UnixCryptTest::testUnixCryptStrings": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.UnixCryptTest::testCtor": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.UnixCryptTest::testUnixCryptExplicitCall": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.UnixCryptTest::testUnixCryptNullData": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.UnixCryptTest::testUnixCryptWithoutSalt": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.UnixCryptTest::testUnixCryptWithEmptySalt": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.UnixCryptTest::testUnixCryptWithHalfSalt": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.digest.UnixCryptTest::testUnixCryptBytes": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.Caverphone1Test::testEndMb": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.Caverphone1Test::testIsCaverphoneEquals": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.Caverphone1Test::testWikipediaExamples": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.Caverphone1Test::testSpecificationV1Examples": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.Caverphone1Test::testCaverphoneRevisitedCommonCodeAT1111": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.Caverphone1Test::testEncodeWithInvalidObject": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.Caverphone1Test::testEncodeNull": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.Caverphone1Test::testEncodeEmpty": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.Caverphone1Test::testLocaleIndependence": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.Caverphone2Test::testCaverphoneRevisitedRandomNameTTA1111111": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.Caverphone2Test::testCaverphoneRevisitedRandomNameTN11111111": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.Caverphone2Test::testCaverphoneRevisitedRandomNameKLN1111111": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.Caverphone2Test::testEndMb": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.Caverphone2Test::testIsCaverphoneEquals": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.Caverphone2Test::testCaverphoneRevisitedCommonCodeAT11111111": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.Caverphone2Test::testCaverphoneRevisitedExamples": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.Caverphone2Test::testCaverphoneRevisitedRandomWords": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.Caverphone2Test::testSpecificationExamples": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.Caverphone2Test::testEncodeWithInvalidObject": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.Caverphone2Test::testEncodeNull": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.Caverphone2Test::testEncodeEmpty": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.Caverphone2Test::testLocaleIndependence": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.ColognePhoneticTest::testExamples": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.ColognePhoneticTest::testVariationsMella": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.ColognePhoneticTest::testVariationsMeyer": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.ColognePhoneticTest::testAychlmajrForCodec122": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.ColognePhoneticTest::testEdgeCases": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.ColognePhoneticTest::testIsEncodeEquals": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.ColognePhoneticTest::testAabjoe": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.ColognePhoneticTest::testAaclan": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.ColognePhoneticTest::testHyphen": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.ColognePhoneticTest::testEncodeWithInvalidObject": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.ColognePhoneticTest::testEncodeNull": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.ColognePhoneticTest::testEncodeEmpty": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.ColognePhoneticTest::testLocaleIndependence": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.DaitchMokotoffSoundexTest::testSoundexBasic": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.DaitchMokotoffSoundexTest::testAdjacentCodes": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.DaitchMokotoffSoundexTest::testSpecialRomanianCharacters": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.DaitchMokotoffSoundexTest::testSoundexBasic2": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.DaitchMokotoffSoundexTest::testSoundexBasic3": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.DaitchMokotoffSoundexTest::testEncodeIgnoreHyphens": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.DaitchMokotoffSoundexTest::testEncodeIgnoreTrimmable": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.DaitchMokotoffSoundexTest::testEncodeIgnoreApostrophes": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.DaitchMokotoffSoundexTest::testAccentedCharacterFolding": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.DaitchMokotoffSoundexTest::testEncodeWithInvalidObject": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.DaitchMokotoffSoundexTest::testEncodeNull": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.DaitchMokotoffSoundexTest::testEncodeEmpty": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.DaitchMokotoffSoundexTest::testLocaleIndependence": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.DoubleMetaphone2Test::testDoubleMetaphonePrimary": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.DoubleMetaphone2Test::testDoubleMetaphoneAlternate": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.DoubleMetaphone2Test::testEncodeWithInvalidObject": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.DoubleMetaphone2Test::testEncodeNull": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.DoubleMetaphone2Test::testEncodeEmpty": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.DoubleMetaphone2Test::testLocaleIndependence": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.DoubleMetaphoneTest::testSetMaxCodeLength": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.DoubleMetaphoneTest::testIsDoubleMetaphoneEqualBasic": {
            "line_rate": "0.1282051282051282",
            "branch_rate": "0.25"
        },
        "org.apache.commons.codec.language.DoubleMetaphoneTest::testEmpty": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.DoubleMetaphoneTest::testCCedilla": {
            "line_rate": "0.10256410256410256",
            "branch_rate": "0.20833333333333334"
        },
        "org.apache.commons.codec.language.DoubleMetaphoneTest::testCodec184": {
            "line_rate": "0.10256410256410256",
            "branch_rate": "0.20833333333333334"
        },
        "org.apache.commons.codec.language.DoubleMetaphoneTest::testIsDoubleMetaphoneEqualExtended1": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.DoubleMetaphoneTest::testIsDoubleMetaphoneEqualExtended2": {
            "line_rate": "0.10256410256410256",
            "branch_rate": "0.20833333333333334"
        },
        "org.apache.commons.codec.language.DoubleMetaphoneTest::testIsDoubleMetaphoneEqualExtended3": {
            "line_rate": "0.10256410256410256",
            "branch_rate": "0.20833333333333334"
        },
        "org.apache.commons.codec.language.DoubleMetaphoneTest::testIsDoubleMetaphoneEqualWithMATCHES": {
            "line_rate": "0.10256410256410256",
            "branch_rate": "0.20833333333333334"
        },
        "org.apache.commons.codec.language.DoubleMetaphoneTest::testDoubleMetaphone": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.DoubleMetaphoneTest::testNTilde": {
            "line_rate": "0.10256410256410256",
            "branch_rate": "0.20833333333333334"
        },
        "org.apache.commons.codec.language.DoubleMetaphoneTest::testIsDoubleMetaphoneNotEqual": {
            "line_rate": "0.10256410256410256",
            "branch_rate": "0.20833333333333334"
        },
        "org.apache.commons.codec.language.DoubleMetaphoneTest::testEncodeWithInvalidObject": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.DoubleMetaphoneTest::testEncodeNull": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.DoubleMetaphoneTest::testEncodeEmpty": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.DoubleMetaphoneTest::testLocaleIndependence": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testisEncodeEquals_CornerCase_SecondNameJustSpace_ReturnsFalse": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testCompare_SOPHIE_SOFIA_SuccessfullyMatched": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testGetMinRating_1_Returns5_Successfully": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testisEncodeEquals_CornerCase_SecondNameNothing_ReturnsFalse": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testCompare_SurnameCornerCase_Nulls_NoMatch": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testGetMinRating_7_Return4_Successfully": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testCompare_SAM_SAMUEL_SuccessfullyMatched": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testisEncodeEquals_CornerCase_FirstNameNothing_ReturnsFalse": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testgetMinRating_6_Returns4_Successfully": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testAccentRemoval_NullValue_ReturnNullSuccessfully": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testleftTorightThenRightToLeft_EINSTEIN_MICHAELA_Returns0": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testCompare_STEPHEN_STEVEN_SuccessfullyMatched": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testCompare_Surname_MOSKOWITZ_MOSKOVITZ_SuccessfullyMatched": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testCompare_SurnamesCornerCase_MURPHY_Space_NoMatch": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testCompare_OONA_OONAGH_SuccessfullyMatched": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testCompare_Forenames_SEAN_JOHN_MatchExpected": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testCompare_Surname_HAILEY_HALLEY_SuccessfullyMatched": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testCompare_TOMASZ_TOM_SuccessfullyMatched": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testCompare_KARL_ALESSANDRO_DoesNotMatch": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testCompare_Surname_LIPSHITZ_LIPPSZYC_SuccessfullyMatched": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testCompare_CATHERINE_KATHRYN_SuccessfullyMatched": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testRemoveVowel__AIDAN_Returns_ADN": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testIsVowel_CapitalA_ReturnsTrue": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testRemoveSingleDoubleConsonants_BUBLE_RemovedSuccessfully": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testRemoveDoubleConsonants_MISSISSIPPI_RemovedSuccessfully": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testAccentRemoval_MixedWithUnusualChars_SuccessfullyRemovedAndUnusualcharactersInvariant": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testGetEncoding_Null_to_Nothing": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testCompareNameSameNames_ReturnsFalseSuccessfully": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testGetMinRating_2_Returns5_Successfully": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testCompare_ZACH_ZAKARIA_SuccessfullyMatched": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testCompare_MCGOWAN_MCGEOGHEGAN_SuccessfullyMatched": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testCompare_Surname_SZLAMAWICZ_SHLAMOVITZ_SuccessfullyMatched": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testRemoveVowel_ALESSANDRA_Returns_ALSSNDR": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testCompare_ShortNames_AL_ED_WorksButNoMatch": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testAccentRemoval_ComprehensiveAccentMix_AllSuccessfullyRemoved": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testgetMinRating_7_Returns4_Successfully": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testCompare_SMITH_SMYTH_SuccessfullyMatched": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testGetEncoding_HARPER_HRPR": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testCompare_STEPHEN_STEFAN_SuccessfullyMatched": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testleftTorightThenRightToLeft_ALEXANDER_ALEXANDRA_Returns4": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testCompare_MICKY_MICHAEL_SuccessfullyMatched": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testIsVowel_SmallD_ReturnsFalse": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testAccentRemoval_GerSpanFrenMix_SuccessfullyRemoved": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testisEncodeEquals_CornerCase_SecondNameNull_ReturnsFalse": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testgetMinRating_11_Returns_3_Successfully": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testGetFirstLast3__ALEXANDER_Returns_Aleder": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testgetMinRating_5_Returns4_Successfully2": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testCompare_Surname_COOPERFLYNN_SUPERLYN_SuccessfullyMatched": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testCompare_Surname_PRZEMYSL_PSHEMESHIL_SuccessfullyMatched": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testCompareNameNullSpace_ReturnsFalseSuccessfully": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testGetMinRating_13_Returns_1_Successfully": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testCompare_BURNS_BOURNE_SuccessfullyMatched": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testAccentRemovalNormalString_NoChange": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testCompare_SmallInput_CARK_Kl_SuccessfullyMatched": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testCompare_PETERSON_PETERS_SuccessfullyMatched": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testCompare_Surname_ROSOCHOWACIEC_ROSOKHOVATSETS_SuccessfullyMatched": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testCompare_Surname_AUERBACH_UHRBACH_SuccessfullyMatched": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testisEncodeEquals_CornerCase_FirstNameJust1Letter_ReturnsFalse": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testGetEncoding_NoSpace_to_Nothing": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testCompare_LongSurnames_OMUIRCHEARTAIGH_OMIREADHAIGH_SuccessfulMatch": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testRemoveDoubleDoubleVowel_BEETLE_NotRemoved": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testCompare_Forenames_UNA_OONAGH_ShouldSuccessfullyMatchButDoesNot": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testCompare_STEVEN_STEFAN_SuccessfullyMatched": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testAccentRemoval_UpperandLower_SuccessfullyRemovedAndCaseInvariant": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testisEncodeEquals_CornerCase_FirstNameJustSpace_ReturnsFalse": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testcleanName_SuccessfullyClean": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testisEncodeEquals_CornerCase_FirstNameNull_ReturnsFalse": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testCompare_Forenames_SEAN_PETE_NoMatchExpected": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testCompare_COLM_COLIN_WithAccentsAndSymbolsAndSpaces_SuccessfullyMatched": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testCompare_LongSurnames_MORIARTY_OMUIRCHEARTAIGH_DoesNotSuccessfulMatch": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testisVowel_SingleVowel_ReturnsTrue": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testCompare_Surname_OSULLIVAN_OSUILLEABHAIN_SuccessfulMatch": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testCompare_Surnames_MURPHY_LYNCH_NoMatchExpected": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testCompare_SEAN_SHAUN_SuccessfullyMatched": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testCompareNameToSingleLetter_KARL_C_DoesNotMatch": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testCompare_FRANCISZEK_FRANCES_SuccessfullyMatched": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testGetEncoding_SMYTH_to_SMYTH": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testgetMinRating_8_Returns3_Successfully": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testGetFirstLast3_PETE_Returns_PETE": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testgetMinRating_5_Returns4_Successfully": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testAccentRemoval_NINO_NoChange": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testgetMinRating_10_Returns3_Successfully": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testGetEncoding_One_Letter_to_Nothing": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testAccentRemoval_AllLower_SuccessfullyRemoved": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testRemoveVowel__DECLAN_Returns_DCLN": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testGetEncoding_Space_to_Nothing": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testisEncodeEqualsSecondNameJust1Letter_ReturnsFalse": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testGetEncoding_SMITH_to_SMTH": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testAccentRemoval_WithSpaces_SuccessfullyRemovedAndSpacesInvariant": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testCompare_Surname_LEWINSKY_LEVINSKI_SuccessfullyMatched": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testCompare_SurnamesCornerCase_MURPHY_NoSpace_NoMatch": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testCompare_BRIAN_BRYAN_SuccessfullyMatched": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testEncodeWithInvalidObject": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testEncodeNull": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testEncodeEmpty": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MatchRatingApproachEncoderTest::testLocaleIndependence": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MetaphoneTest::testTranslateOfSCHAndCH": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MetaphoneTest::testTranslateToJOfDGEOrDGIOrDGY": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MetaphoneTest::testTCH": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MetaphoneTest::testWhy": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MetaphoneTest::testIsMetaphoneEqual1": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MetaphoneTest::testIsMetaphoneEqual2": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MetaphoneTest::testPHTOF": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MetaphoneTest::testDiscardOfSilentGN": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MetaphoneTest::testIsMetaphoneEqualParis": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MetaphoneTest::testIsMetaphoneEqualPeter": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MetaphoneTest::testIsMetaphoneEqualSusan": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MetaphoneTest::testIsMetaphoneEqualWhite": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MetaphoneTest::testIsMetaphoneEqualXalan": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MetaphoneTest::testIsMetaphoneEqualAlbert": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MetaphoneTest::testIsMetaphoneEqualKnight": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MetaphoneTest::testMetaphone": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MetaphoneTest::testIsMetaphoneEqualWright": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MetaphoneTest::testSHAndSIOAndSIAToX": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MetaphoneTest::testSetMaxLengthWithTruncation": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MetaphoneTest::testTIOAndTIAToX": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MetaphoneTest::testExceedLength": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MetaphoneTest::testWordEndingInMB": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MetaphoneTest::testIsMetaphoneEqualAero": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MetaphoneTest::testIsMetaphoneEqualGary": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MetaphoneTest::testIsMetaphoneEqualJohn": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MetaphoneTest::testIsMetaphoneEqualMary": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MetaphoneTest::testDiscardOfSilentHAfterG": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MetaphoneTest::testWordsWithCIA": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MetaphoneTest::testDiscardOfSCEOrSCIOrSCY": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MetaphoneTest::testIsMetaphoneEqualRay": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MetaphoneTest::testEncodeWithInvalidObject": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MetaphoneTest::testEncodeNull": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MetaphoneTest::testEncodeEmpty": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.MetaphoneTest::testLocaleIndependence": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.NysiisTest::testRule4Dot1": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.NysiisTest::testRule4Dot2": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.NysiisTest::testCap": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.NysiisTest::testDad": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.NysiisTest::testDan": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.NysiisTest::testFal": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.NysiisTest::testRule1": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.NysiisTest::testRule2": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.NysiisTest::testRule5": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.NysiisTest::testRule6": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.NysiisTest::testRule7": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.NysiisTest::testBran": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.NysiisTest::testSnad": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.NysiisTest::testSnat": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.NysiisTest::testTrueVariant": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.NysiisTest::testDropBy": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.NysiisTest::testOthers": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.NysiisTest::testTranan": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.NysiisTest::testSpecialBranches": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.NysiisTest::testEncodeWithInvalidObject": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.NysiisTest::testEncodeNull": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.NysiisTest::testEncodeEmpty": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.NysiisTest::testLocaleIndependence": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.RefinedSoundexTest::testDifference": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.RefinedSoundexTest::testNewInstance": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.RefinedSoundexTest::testGetMappingCodeNonLetter": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.RefinedSoundexTest::testEncode": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.RefinedSoundexTest::testNewInstance2": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.RefinedSoundexTest::testNewInstance3": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.RefinedSoundexTest::testEncodeWithInvalidObject": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.RefinedSoundexTest::testEncodeNull": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.RefinedSoundexTest::testEncodeEmpty": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.RefinedSoundexTest::testLocaleIndependence": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.SoundexTest::testWikipediaAmericanSoundex": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.SoundexTest::testBadCharacters": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.SoundexTest::testUsEnglishStatic": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.SoundexTest::testMsSqlServer1": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.SoundexTest::testMsSqlServer2": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.SoundexTest::testMsSqlServer3": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.SoundexTest::testB650": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.SoundexTest::testEncodeBatch2": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.SoundexTest::testEncodeBatch3": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.SoundexTest::testEncodeBatch4": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.SoundexTest::testSoundexUtilsNullBehaviour": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.SoundexTest::testEncodeIgnoreHyphens": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.SoundexTest::testEncodeIgnoreTrimmable": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.SoundexTest::testEncodeIgnoreApostrophes": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.SoundexTest::testDifference": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.SoundexTest::testNewInstance": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.SoundexTest::testEncodeBasic": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.SoundexTest::testUsMappingEWithAcute": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.SoundexTest::testNewInstance2": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.SoundexTest::testNewInstance3": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.SoundexTest::testSoundexUtilsConstructable": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.SoundexTest::testUsMappingOWithDiaeresis": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.SoundexTest::testHWRuleEx1": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.SoundexTest::testHWRuleEx2": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.SoundexTest::testHWRuleEx3": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.SoundexTest::testEncodeWithInvalidObject": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.SoundexTest::testEncodeNull": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.SoundexTest::testEncodeEmpty": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.SoundexTest::testLocaleIndependence": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest::testEncodeGna": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest::testAsciiEncodeNotEmpty1Letter": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest::testInvalidLanguageIllegalArgumentException": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest::testSetRuleTypeExact": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest::testAllChars": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest::testEncodeAtzNotEmpty": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest::testOOM": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest::testNegativeIndexForRuleMatchIndexOutOfBoundsException": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest::testInvalidLangIllegalArgumentException": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest::testAsciiEncodeNotEmpty2Letters": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest::testSpeedCheck": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest::testSetNameTypeAsh": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest::testSetConcat": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest::testSpeedCheck2": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest::testSpeedCheck3": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest::testSetRuleTypeToRulesIllegalArgumentException": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest::testLongestEnglishSurname": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest::testInvalidLangIllegalStateException": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest::testEncodeWithInvalidObject": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest::testEncodeNull": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest::testEncodeEmpty": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest::testLocaleIndependence": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.bm.LanguageGuessingTest::testLanguageGuessing[Renault-french-{2}]": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.bm.LanguageGuessingTest::testLanguageGuessing[Mickiewicz-polish-{2}]": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.bm.LanguageGuessingTest::testLanguageGuessing[Thompson-english-{2}]": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.bm.LanguageGuessingTest::testLanguageGuessing[Nu\u00f1ez-spanish-{2}]": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.bm.LanguageGuessingTest::testLanguageGuessing[Carvalho-portuguese-{2}]": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.bm.LanguageGuessingTest::testLanguageGuessing[\u010capek-czech-{2}]": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.bm.LanguageGuessingTest::testLanguageGuessing[Sjneijder-dutch-{2}]": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.bm.LanguageGuessingTest::testLanguageGuessing[Klausewitz-german-{2}]": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.bm.LanguageGuessingTest::testLanguageGuessing[K\u00fc\u00e7\u00fck-turkish-{2}]": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.bm.LanguageGuessingTest::testLanguageGuessing[Giacometti-italian-{2}]": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.bm.LanguageGuessingTest::testLanguageGuessing[Nagy-hungarian-{2}]": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.bm.LanguageGuessingTest::testLanguageGuessing[Ceau\u015fescu-romanian-{2}]": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.bm.LanguageGuessingTest::testLanguageGuessing[Angelopoulos-greeklatin-{2}]": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.bm.LanguageGuessingTest::testLanguageGuessing[\u0391\u03b3\u03b3\u03b5\u03bb\u03cc\u03c0\u03bf\u03c5\u03bb\u03bf\u03c2-greek-{2}]": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.bm.LanguageGuessingTest::testLanguageGuessing[\u041f\u0443\u0448\u043a\u0438\u043d-cyrillic-{2}]": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.bm.LanguageGuessingTest::testLanguageGuessing[\u05db\u05d4\u05df-hebrew-{2}]": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.bm.LanguageGuessingTest::testLanguageGuessing[\u00e1cz-any-{2}]": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.bm.LanguageGuessingTest::testLanguageGuessing[\u00e1tz-any-{2}]": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest::testSolrGENERIC": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest::testSolrSEPHARDIC": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest::testCompatibilityWithOriginalVersion": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest::testSolrASHKENAZI": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.bm.RuleTest::testPhonemeComparedToLaterIsNegative": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.bm.RuleTest::testSubSequenceWorks": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.language.bm.RuleTest::testPhonemeComparedToSelfIsZero": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.net.BCodecTest::testUTF8RoundTrip": {
            "line_rate": "0.1282051282051282",
            "branch_rate": "0.08333333333333333"
        },
        "org.apache.commons.codec.net.BCodecTest::testBasicEncodeDecode": {
            "line_rate": "0.1282051282051282",
            "branch_rate": "0.08333333333333333"
        },
        "org.apache.commons.codec.net.BCodecTest::testDecodeStringWithNull": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.net.BCodecTest::testDecodeObjects": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.net.BCodecTest::testEncodeDecodeNull": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.net.BCodecTest::testInvalidEncoding": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.net.BCodecTest::testEncodeStringWithNull": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.net.BCodecTest::testEncodeObjects": {
            "line_rate": "0.05128205128205128",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.net.BCodecTest::testNullInput": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.net.QCodecTest::testUTF8RoundTrip": {
            "line_rate": "0.1282051282051282",
            "branch_rate": "0.08333333333333333"
        },
        "org.apache.commons.codec.net.QCodecTest::testEncodeDecodeBlanks": {
            "line_rate": "0.1282051282051282",
            "branch_rate": "0.08333333333333333"
        },
        "org.apache.commons.codec.net.QCodecTest::testBasicEncodeDecode": {
            "line_rate": "0.1282051282051282",
            "branch_rate": "0.08333333333333333"
        },
        "org.apache.commons.codec.net.QCodecTest::testLetUsMakeCloverHappy": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.net.QCodecTest::testDecodeStringWithNull": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.net.QCodecTest::testDecodeObjects": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.net.QCodecTest::testEncodeDecodeNull": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.net.QCodecTest::testInvalidEncoding": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.net.QCodecTest::testEncodeStringWithNull": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.net.QCodecTest::testEncodeObjects": {
            "line_rate": "0.05128205128205128",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.net.QCodecTest::testUnsafeEncodeDecode": {
            "line_rate": "0.1282051282051282",
            "branch_rate": "0.08333333333333333"
        },
        "org.apache.commons.codec.net.QCodecTest::testNullInput": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.net.QuotedPrintableCodecTest::testUTF8RoundTrip": {
            "line_rate": "0.1282051282051282",
            "branch_rate": "0.08333333333333333"
        },
        "org.apache.commons.codec.net.QuotedPrintableCodecTest::testEncodeNull": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.net.QuotedPrintableCodecTest::testEncodeUrlWithNullBitSet": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.net.QuotedPrintableCodecTest::testBasicEncodeDecode": {
            "line_rate": "0.1282051282051282",
            "branch_rate": "0.08333333333333333"
        },
        "org.apache.commons.codec.net.QuotedPrintableCodecTest::testDefaultEncoding": {
            "line_rate": "0.05128205128205128",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.net.QuotedPrintableCodecTest::testSafeCharEncodeDecode": {
            "line_rate": "0.1282051282051282",
            "branch_rate": "0.08333333333333333"
        },
        "org.apache.commons.codec.net.QuotedPrintableCodecTest::testDecodeInvalid": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.net.QuotedPrintableCodecTest::testSkipNotEncodedCRLF": {
            "line_rate": "0.1282051282051282",
            "branch_rate": "0.08333333333333333"
        },
        "org.apache.commons.codec.net.QuotedPrintableCodecTest::testSoftLineBreakDecode": {
            "line_rate": "0.1282051282051282",
            "branch_rate": "0.08333333333333333"
        },
        "org.apache.commons.codec.net.QuotedPrintableCodecTest::testSoftLineBreakEncode": {
            "line_rate": "0.1282051282051282",
            "branch_rate": "0.08333333333333333"
        },
        "org.apache.commons.codec.net.QuotedPrintableCodecTest::testDecodeStringWithNull": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.net.QuotedPrintableCodecTest::testDecodeObjects": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.net.QuotedPrintableCodecTest::testEncodeDecodeNull": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.net.QuotedPrintableCodecTest::testInvalidEncoding": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.net.QuotedPrintableCodecTest::testUltimateSoftBreak": {
            "line_rate": "0.05128205128205128",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.net.QuotedPrintableCodecTest::testEncodeStringWithNull": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.net.QuotedPrintableCodecTest::testTrailingSpecial": {
            "line_rate": "0.05128205128205128",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.net.QuotedPrintableCodecTest::testEncodeObjects": {
            "line_rate": "0.05128205128205128",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.net.QuotedPrintableCodecTest::testUnsafeEncodeDecode": {
            "line_rate": "0.1282051282051282",
            "branch_rate": "0.08333333333333333"
        },
        "org.apache.commons.codec.net.QuotedPrintableCodecTest::testDecodeWithNullArray": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.net.QuotedPrintableCodecTest::testFinalBytes": {
            "line_rate": "0.05128205128205128",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.net.RFC1522CodecTest::testDecodeInvalid": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.net.RFC1522CodecTest::testNullInput": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.net.URLCodecTest::testUTF8RoundTrip": {
            "line_rate": "0.1282051282051282",
            "branch_rate": "0.08333333333333333"
        },
        "org.apache.commons.codec.net.URLCodecTest::testEncodeNull": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.net.URLCodecTest::testDecodeInvalidContent": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.net.URLCodecTest::testEncodeUrlWithNullBitSet": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.net.URLCodecTest::testBasicEncodeDecode": {
            "line_rate": "0.1282051282051282",
            "branch_rate": "0.08333333333333333"
        },
        "org.apache.commons.codec.net.URLCodecTest::testDefaultEncoding": {
            "line_rate": "0.05128205128205128",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.net.URLCodecTest::testSafeCharEncodeDecode": {
            "line_rate": "0.1282051282051282",
            "branch_rate": "0.08333333333333333"
        },
        "org.apache.commons.codec.net.URLCodecTest::testDecodeInvalid": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.net.URLCodecTest::testDecodeStringWithNull": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.net.URLCodecTest::testDecodeObjects": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.net.URLCodecTest::testEncodeDecodeNull": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.net.URLCodecTest::testInvalidEncoding": {
            "line_rate": "0.07692307692307693",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.net.URLCodecTest::testEncodeStringWithNull": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.net.URLCodecTest::testEncodeObjects": {
            "line_rate": "0.05128205128205128",
            "branch_rate": "0.041666666666666664"
        },
        "org.apache.commons.codec.net.URLCodecTest::testUnsafeEncodeDecode": {
            "line_rate": "0.1282051282051282",
            "branch_rate": "0.08333333333333333"
        },
        "org.apache.commons.codec.net.URLCodecTest::testDecodeWithNullArray": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        },
        "org.apache.commons.codec.net.UtilsTest::testConstructor": {
            "line_rate": "0.0",
            "branch_rate": "0.0"
        }
    }
}